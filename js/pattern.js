// Generated by CoffeeScript 1.12.7
(function() {
  var PDFPattern;

  PDFPattern = (function() {
    function PDFPattern(doc, bbox, xstep, ystep, stream, colored) {
      this.doc = doc;
      this.bbox = bbox;
      this.xstep = xstep;
      this.ystep = ystep;
      this.stream = stream;
      this.colored = colored;
      this.transform = [1, 0, 0, 1, 0, 0];
    }

    PDFPattern.prototype.embed = function() {
      var dx, dy, m, m0, m1, m11, m12, m2, m21, m22, m3, m4, m5, ref, resources, v;
      if (this.id && this.doc.page.patterns[this.id]) {
        return;
      }
      if (!this.id) {
        this.id = 'P' + (++this.doc._patternCount);
      }
      if (!this.pattern) {
        m = this.doc._ctm.slice();
        m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];
        ref = this.transform, m11 = ref[0], m12 = ref[1], m21 = ref[2], m22 = ref[3], dx = ref[4], dy = ref[5];
        m[0] = m0 * m11 + m2 * m12;
        m[1] = m1 * m11 + m3 * m12;
        m[2] = m0 * m21 + m2 * m22;
        m[3] = m1 * m21 + m3 * m22;
        m[4] = m0 * dx + m2 * dy + m4;
        m[5] = m1 * dx + m3 * dy + m5;
        resources = this.doc.ref();
        resources.end();
        this.pattern = this.doc.ref({
          Type: 'Pattern',
          PatternType: 1,
          PaintType: this.colored ? 1 : 2,
          TilingType: 2,
          BBox: this.bbox,
          XStep: this.xstep,
          YStep: this.ystep,
          Matrix: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = m.length; i < len; i++) {
              v = m[i];
              results.push(+v.toFixed(5));
            }
            return results;
          })(),
          Resources: resources
        });
        this.pattern.end(this.stream);
      }
      return this.doc.page.patterns[this.id] = this.pattern;
    };

    PDFPattern.prototype.apply = function(stroke, color) {
      var csId, op;
      if (color == null) {
        color = null;
      }
      this.embed();
      this.doc._embedPatternColorSpaces();
      op = stroke ? 'SCN' : 'scn';
      if (this.colored) {
        this.doc._setColorSpace('Pattern', stroke);
        return this.doc.addContent("/" + this.id + " " + op);
      } else {
        if (color == null) {
          color = 'black';
        }
        color = this.doc._normalizeColor(color);
        if (this.doc._isPatternColor(color)) {
          throw new Error("uncolored pattern must be colored with non-pattern color");
        }
        csId = this.doc._getPatternColorSpace(color);
        this.doc._setColorSpace(csId, stroke);
        return this.doc.addContent((color.join(' ')) + " /" + this.id + " " + op);
      }
    };

    return PDFPattern;

  })();

  module.exports = {
    PDFPattern: PDFPattern
  };

}).call(this);
